#pragma once

#include "../types.h"

#define WB_SCANCODE_MASK (1<<30)
#define WB_SCANCODE_TO_KEY(x)  (x | WB_SCANCODE_MASK)

typedef enum WbInputContext
{
    WB_INPUT_CONTEXT_MENU,
    WB_INPUT_CONTEXT_GAME
} WbInputContext;

typedef enum WbMouseButton
{
    WB_MOUSE_BUTTON_LEFT,
    WB_MOUSE_BUTTON_MIDDLE,
    WB_MOUSE_BUTTON_RIGHT,
    WB_MOUSE_BUTTON_4,
    WB_MOUSE_BUTTON_5,
    WB_MOUSE_BUTTON_COUNT
} WbMouseButton;

typedef enum WbScancode
{
    WB_SCANCODE_UNKNOWN = 0,
    WB_SCANCODE_A = 4,
    WB_SCANCODE_B = 5,
    WB_SCANCODE_C = 6,
    WB_SCANCODE_D = 7,
    WB_SCANCODE_E = 8,
    WB_SCANCODE_F = 9,
    WB_SCANCODE_G = 10,
    WB_SCANCODE_H = 11,
    WB_SCANCODE_I = 12,
    WB_SCANCODE_J = 13,
    WB_SCANCODE_K = 14,
    WB_SCANCODE_L = 15,
    WB_SCANCODE_M = 16,
    WB_SCANCODE_N = 17,
    WB_SCANCODE_O = 18,
    WB_SCANCODE_P = 19,
    WB_SCANCODE_Q = 20,
    WB_SCANCODE_R = 21,
    WB_SCANCODE_S = 22,
    WB_SCANCODE_T = 23,
    WB_SCANCODE_U = 24,
    WB_SCANCODE_V = 25,
    WB_SCANCODE_W = 26,
    WB_SCANCODE_X = 27,
    WB_SCANCODE_Y = 28,
    WB_SCANCODE_Z = 29,

    WB_SCANCODE_1 = 30,
    WB_SCANCODE_2 = 31,
    WB_SCANCODE_3 = 32,
    WB_SCANCODE_4 = 33,
    WB_SCANCODE_5 = 34,
    WB_SCANCODE_6 = 35,
    WB_SCANCODE_7 = 36,
    WB_SCANCODE_8 = 37,
    WB_SCANCODE_9 = 38,
    WB_SCANCODE_0 = 39,

    WB_SCANCODE_RETURN = 40,
    WB_SCANCODE_ESCAPE = 41,
    WB_SCANCODE_BACKSPACE = 42,
    WB_SCANCODE_TAB = 43,
    WB_SCANCODE_SPACE = 44,

    WB_SCANCODE_MINUS = 45,
    WB_SCANCODE_EQUALS = 46,
    WB_SCANCODE_LEFTBRACKET = 47,
    WB_SCANCODE_RIGHTBRACKET = 48,
    WB_SCANCODE_BACKSLASH = 49,
    WB_SCANCODE_NONUSHASH = 50,
    WB_SCANCODE_SEMICOLON = 51,
    WB_SCANCODE_APOSTROPHE = 52,
    WB_SCANCODE_GRAVE = 53,
    WB_SCANCODE_COMMA = 54,
    WB_SCANCODE_PERIOD = 55,
    WB_SCANCODE_SLASH = 56,

    WB_SCANCODE_CAPSLOCK = 57,

    WB_SCANCODE_F1 = 58,
    WB_SCANCODE_F2 = 59,
    WB_SCANCODE_F3 = 60,
    WB_SCANCODE_F4 = 61,
    WB_SCANCODE_F5 = 62,
    WB_SCANCODE_F6 = 63,
    WB_SCANCODE_F7 = 64,
    WB_SCANCODE_F8 = 65,
    WB_SCANCODE_F9 = 66,
    WB_SCANCODE_F10 = 67,
    WB_SCANCODE_F11 = 68,
    WB_SCANCODE_F12 = 69,

    WB_SCANCODE_PRINTSCREEN = 70,
    WB_SCANCODE_SCROLLLOCK = 71,
    WB_SCANCODE_PAUSE = 72,
    WB_SCANCODE_INSERT = 73,
    WB_SCANCODE_HOME = 74,
    WB_SCANCODE_PAGEUP = 75,
    WB_SCANCODE_DELETE = 76,
    WB_SCANCODE_END = 77,
    WB_SCANCODE_PAGEDOWN = 78,
    WB_SCANCODE_RIGHT = 79,
    WB_SCANCODE_LEFT = 80,
    WB_SCANCODE_DOWN = 81,
    WB_SCANCODE_UP = 82,

    WB_SCANCODE_NUMLOCKCLEAR = 83,
    WB_SCANCODE_KP_DIVIDE = 84,
    WB_SCANCODE_KP_MULTIPLY = 85,
    WB_SCANCODE_KP_MINUS = 86,
    WB_SCANCODE_KP_PLUS = 87,
    WB_SCANCODE_KP_ENTER = 88,
    WB_SCANCODE_KP_1 = 89,
    WB_SCANCODE_KP_2 = 90,
    WB_SCANCODE_KP_3 = 91,
    WB_SCANCODE_KP_4 = 92,
    WB_SCANCODE_KP_5 = 93,
    WB_SCANCODE_KP_6 = 94,
    WB_SCANCODE_KP_7 = 95,
    WB_SCANCODE_KP_8 = 96,
    WB_SCANCODE_KP_9 = 97,
    WB_SCANCODE_KP_0 = 98,
    WB_SCANCODE_KP_PERIOD = 99,

    WB_SCANCODE_NONUSBACKSLASH = 100,
    WB_SCANCODE_APPLICATION = 101,
    WB_SCANCODE_POWER = 102,
    WB_SCANCODE_KP_EQUALS = 103,
    WB_SCANCODE_F13 = 104,
    WB_SCANCODE_F14 = 105,
    WB_SCANCODE_F15 = 106,
    WB_SCANCODE_F16 = 107,
    WB_SCANCODE_F17 = 108,
    WB_SCANCODE_F18 = 109,
    WB_SCANCODE_F19 = 110,
    WB_SCANCODE_F20 = 111,
    WB_SCANCODE_F21 = 112,
    WB_SCANCODE_F22 = 113,
    WB_SCANCODE_F23 = 114,
    WB_SCANCODE_F24 = 115,
    WB_SCANCODE_EXECUTE = 116,
    WB_SCANCODE_HELP = 117,
    WB_SCANCODE_MENU = 118,
    WB_SCANCODE_SELECT = 119,
    WB_SCANCODE_STOP = 120,
    WB_SCANCODE_AGAIN = 121,
    WB_SCANCODE_UNDO = 122,
    WB_SCANCODE_CUT = 123,
    WB_SCANCODE_COPY = 124,
    WB_SCANCODE_PASTE = 125,
    WB_SCANCODE_FIND = 126,
    WB_SCANCODE_MUTE = 127,
    WB_SCANCODE_VOLUMEUP = 128,
    WB_SCANCODE_VOLUMEDOWN = 129,
    WB_SCANCODE_KP_COMMA = 133,
    WB_SCANCODE_KP_EQUALSAS400 = 134,

    WB_SCANCODE_ALTERASE = 153,
    WB_SCANCODE_SYSREQ = 154,
    WB_SCANCODE_CANCEL = 155,
    WB_SCANCODE_CLEAR = 156,
    WB_SCANCODE_PRIOR = 157,
    WB_SCANCODE_RETURN2 = 158,
    WB_SCANCODE_SEPARATOR = 159,
    WB_SCANCODE_OUT = 160,
    WB_SCANCODE_OPER = 161,
    WB_SCANCODE_CLEARAGAIN = 162,
    WB_SCANCODE_CRSEL = 163,
    WB_SCANCODE_EXSEL = 164,

    WB_SCANCODE_KP_00 = 176,
    WB_SCANCODE_KP_000 = 177,
    WB_SCANCODE_THOUSANDSSEPARATOR = 178,
    WB_SCANCODE_DECIMALSEPARATOR = 179,
    WB_SCANCODE_CURRENCYUNIT = 180,
    WB_SCANCODE_CURRENCYSUBUNIT = 181,
    WB_SCANCODE_KP_LEFTPAREN = 182,
    WB_SCANCODE_KP_RIGHTPAREN = 183,
    WB_SCANCODE_KP_LEFTBRACE = 184,
    WB_SCANCODE_KP_RIGHTBRACE = 185,
    WB_SCANCODE_KP_TAB = 186,
    WB_SCANCODE_KP_BACKSPACE = 187,
    WB_SCANCODE_KP_A = 188,
    WB_SCANCODE_KP_B = 189,
    WB_SCANCODE_KP_C = 190,
    WB_SCANCODE_KP_D = 191,
    WB_SCANCODE_KP_E = 192,
    WB_SCANCODE_KP_F = 193,
    WB_SCANCODE_KP_XOR = 194,
    WB_SCANCODE_KP_POWER = 195,
    WB_SCANCODE_KP_PERCENT = 196,
    WB_SCANCODE_KP_LESS = 197,
    WB_SCANCODE_KP_GREATER = 198,
    WB_SCANCODE_KP_AMPERSAND = 199,
    WB_SCANCODE_KP_DBLAMPERSAND = 200,
    WB_SCANCODE_KP_VERTICALBAR = 201,
    WB_SCANCODE_KP_DBLVERTICALBAR = 202,
    WB_SCANCODE_KP_COLON = 203,
    WB_SCANCODE_KP_HASH = 204,
    WB_SCANCODE_KP_SPACE = 205,
    WB_SCANCODE_KP_AT = 206,
    WB_SCANCODE_KP_EXCLAM = 207,
    WB_SCANCODE_KP_MEMSTORE = 208,
    WB_SCANCODE_KP_MEMRECALL = 209,
    WB_SCANCODE_KP_MEMCLEAR = 210,
    WB_SCANCODE_KP_MEMADD = 211,
    WB_SCANCODE_KP_MEMSUBTRACT = 212,
    WB_SCANCODE_KP_MEMMULTIPLY = 213,
    WB_SCANCODE_KP_MEMDIVIDE = 214,
    WB_SCANCODE_KP_PLUSMINUS = 215,
    WB_SCANCODE_KP_CLEAR = 216,
    WB_SCANCODE_KP_CLEARENTRY = 217,
    WB_SCANCODE_KP_BINARY = 218,
    WB_SCANCODE_KP_OCTAL = 219,
    WB_SCANCODE_KP_DECIMAL = 220,
    WB_SCANCODE_KP_HEXADECIMAL = 221,

    WB_SCANCODE_LCTRL = 224,
    WB_SCANCODE_LSHIFT = 225,
    WB_SCANCODE_LALT = 226,
    WB_SCANCODE_LGUI = 227,
    WB_SCANCODE_RCTRL = 228,
    WB_SCANCODE_RSHIFT = 229,
    WB_SCANCODE_RALT = 230,
    WB_SCANCODE_RGUI = 231,
    WB_SCANCODE_COUNT = 256
} WbScancode;

typedef enum WbKey
{
    WB_KEY_UNKNOWN = 0,

    WB_KEY_RETURN = '\r',
    WB_KEY_ESCAPE = '\x1B',
    WB_KEY_BACKSPACE = '\b',
    WB_KEY_TAB = '\t',
    WB_KEY_SPACE = ' ',
    WB_KEY_EXCLAIM = '!',
    WB_KEY_QUOTEDBL = '"',
    WB_KEY_HASH = '#',
    WB_KEY_PERCENT = '%',
    WB_KEY_DOLLAR = '$',
    WB_KEY_AMPERSAND = '&',
    WB_KEY_QUOTE = '\'',
    WB_KEY_LEFTPAREN = '(',
    WB_KEY_RIGHTPAREN = ')',
    WB_KEY_ASTERISK = '*',
    WB_KEY_PLUS = '+',
    WB_KEY_COMMA = ',',
    WB_KEY_MINUS = '-',
    WB_KEY_PERIOD = '.',
    WB_KEY_SLASH = '/',
    WB_KEY_0 = '0',
    WB_KEY_1 = '1',
    WB_KEY_2 = '2',
    WB_KEY_3 = '3',
    WB_KEY_4 = '4',
    WB_KEY_5 = '5',
    WB_KEY_6 = '6',
    WB_KEY_7 = '7',
    WB_KEY_8 = '8',
    WB_KEY_9 = '9',
    WB_KEY_COLON = ':',
    WB_KEY_SEMICOLON = ';',
    WB_KEY_LESS = '<',
    WB_KEY_EQUALS = '=',
    WB_KEY_GREATER = '>',
    WB_KEY_QUESTION = '?',
    WB_KEY_AT = '@',

    WB_KEY_LEFTBRACKET = '[',
    WB_KEY_BACKSLASH = '\\',
    WB_KEY_RIGHTBRACKET = ']',
    WB_KEY_CARET = '^',
    WB_KEY_UNDERSCORE = '_',
    WB_KEY_BACKQUOTE = '`',
    WB_KEY_a = 'a',
    WB_KEY_b = 'b',
    WB_KEY_c = 'c',
    WB_KEY_d = 'd',
    WB_KEY_e = 'e',
    WB_KEY_f = 'f',
    WB_KEY_g = 'g',
    WB_KEY_h = 'h',
    WB_KEY_i = 'i',
    WB_KEY_j = 'j',
    WB_KEY_k = 'k',
    WB_KEY_l = 'l',
    WB_KEY_m = 'm',
    WB_KEY_n = 'n',
    WB_KEY_o = 'o',
    WB_KEY_p = 'p',
    WB_KEY_q = 'q',
    WB_KEY_r = 'r',
    WB_KEY_s = 's',
    WB_KEY_t = 't',
    WB_KEY_u = 'u',
    WB_KEY_v = 'v',
    WB_KEY_w = 'w',
    WB_KEY_x = 'x',
    WB_KEY_y = 'y',
    WB_KEY_z = 'z',

    WB_KEY_CAPSLOCK = WB_SCANCODE_TO_KEY(WB_SCANCODE_CAPSLOCK),

    WB_KEY_F1 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F1),
    WB_KEY_F2 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F2),
    WB_KEY_F3 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F3),
    WB_KEY_F4 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F4),
    WB_KEY_F5 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F5),
    WB_KEY_F6 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F6),
    WB_KEY_F7 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F7),
    WB_KEY_F8 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F8),
    WB_KEY_F9 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F9),
    WB_KEY_F10 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F10),
    WB_KEY_F11 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F11),
    WB_KEY_F12 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F12),

    WB_KEY_PRINTSCREEN = WB_SCANCODE_TO_KEY(WB_SCANCODE_PRINTSCREEN),
    WB_KEY_SCROLLLOCK = WB_SCANCODE_TO_KEY(WB_SCANCODE_SCROLLLOCK),
    WB_KEY_PAUSE = WB_SCANCODE_TO_KEY(WB_SCANCODE_PAUSE),
    WB_KEY_INSERT = WB_SCANCODE_TO_KEY(WB_SCANCODE_INSERT),
    WB_KEY_HOME = WB_SCANCODE_TO_KEY(WB_SCANCODE_HOME),
    WB_KEY_PAGEUP = WB_SCANCODE_TO_KEY(WB_SCANCODE_PAGEUP),
    WB_KEY_DELETE = '\x7F',
    WB_KEY_END = WB_SCANCODE_TO_KEY(WB_SCANCODE_END),
    WB_KEY_PAGEDOWN = WB_SCANCODE_TO_KEY(WB_SCANCODE_PAGEDOWN),
    WB_KEY_RIGHT = WB_SCANCODE_TO_KEY(WB_SCANCODE_RIGHT),
    WB_KEY_LEFT = WB_SCANCODE_TO_KEY(WB_SCANCODE_LEFT),
    WB_KEY_DOWN = WB_SCANCODE_TO_KEY(WB_SCANCODE_DOWN),
    WB_KEY_UP = WB_SCANCODE_TO_KEY(WB_SCANCODE_UP),

    WB_KEY_NUMLOCKCLEAR = WB_SCANCODE_TO_KEY(WB_SCANCODE_NUMLOCKCLEAR),
    WB_KEY_KP_DIVIDE = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_DIVIDE),
    WB_KEY_KP_MULTIPLY = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_MULTIPLY),
    WB_KEY_KP_MINUS = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_MINUS),
    WB_KEY_KP_PLUS = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_PLUS),
    WB_KEY_KP_ENTER = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_ENTER),
    WB_KEY_KP_1 = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_1),
    WB_KEY_KP_2 = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_2),
    WB_KEY_KP_3 = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_3),
    WB_KEY_KP_4 = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_4),
    WB_KEY_KP_5 = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_5),
    WB_KEY_KP_6 = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_6),
    WB_KEY_KP_7 = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_7),
    WB_KEY_KP_8 = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_8),
    WB_KEY_KP_9 = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_9),
    WB_KEY_KP_0 = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_0),
    WB_KEY_KP_PERIOD = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_PERIOD),

    WB_KEY_APPLICATION = WB_SCANCODE_TO_KEY(WB_SCANCODE_APPLICATION),
    WB_KEY_POWER = WB_SCANCODE_TO_KEY(WB_SCANCODE_POWER),
    WB_KEY_KP_EQUALS = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_EQUALS),
    WB_KEY_F13 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F13),
    WB_KEY_F14 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F14),
    WB_KEY_F15 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F15),
    WB_KEY_F16 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F16),
    WB_KEY_F17 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F17),
    WB_KEY_F18 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F18),
    WB_KEY_F19 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F19),
    WB_KEY_F20 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F20),
    WB_KEY_F21 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F21),
    WB_KEY_F22 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F22),
    WB_KEY_F23 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F23),
    WB_KEY_F24 = WB_SCANCODE_TO_KEY(WB_SCANCODE_F24),
    WB_KEY_EXECUTE = WB_SCANCODE_TO_KEY(WB_SCANCODE_EXECUTE),
    WB_KEY_HELP = WB_SCANCODE_TO_KEY(WB_SCANCODE_HELP),
    WB_KEY_MENU = WB_SCANCODE_TO_KEY(WB_SCANCODE_MENU),
    WB_KEY_SELECT = WB_SCANCODE_TO_KEY(WB_SCANCODE_SELECT),
    WB_KEY_STOP = WB_SCANCODE_TO_KEY(WB_SCANCODE_STOP),
    WB_KEY_AGAIN = WB_SCANCODE_TO_KEY(WB_SCANCODE_AGAIN),
    WB_KEY_UNDO = WB_SCANCODE_TO_KEY(WB_SCANCODE_UNDO),
    WB_KEY_CUT = WB_SCANCODE_TO_KEY(WB_SCANCODE_CUT),
    WB_KEY_COPY = WB_SCANCODE_TO_KEY(WB_SCANCODE_COPY),
    WB_KEY_PASTE = WB_SCANCODE_TO_KEY(WB_SCANCODE_PASTE),
    WB_KEY_FIND = WB_SCANCODE_TO_KEY(WB_SCANCODE_FIND),
    WB_KEY_MUTE = WB_SCANCODE_TO_KEY(WB_SCANCODE_MUTE),
    WB_KEY_VOLUMEUP = WB_SCANCODE_TO_KEY(WB_SCANCODE_VOLUMEUP),
    WB_KEY_VOLUMEDOWN = WB_SCANCODE_TO_KEY(WB_SCANCODE_VOLUMEDOWN),
    WB_KEY_KP_COMMA = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_COMMA),
    WB_KEY_KP_EQUALSAS400 = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_EQUALSAS400),

    WB_KEY_ALTERASE = WB_SCANCODE_TO_KEY(WB_SCANCODE_ALTERASE),
    WB_KEY_SYSREQ = WB_SCANCODE_TO_KEY(WB_SCANCODE_SYSREQ),
    WB_KEY_CANCEL = WB_SCANCODE_TO_KEY(WB_SCANCODE_CANCEL),
    WB_KEY_CLEAR = WB_SCANCODE_TO_KEY(WB_SCANCODE_CLEAR),
    WB_KEY_PRIOR = WB_SCANCODE_TO_KEY(WB_SCANCODE_PRIOR),
    WB_KEY_RETURN2 = WB_SCANCODE_TO_KEY(WB_SCANCODE_RETURN2),
    WB_KEY_SEPARATOR = WB_SCANCODE_TO_KEY(WB_SCANCODE_SEPARATOR),
    WB_KEY_OUT = WB_SCANCODE_TO_KEY(WB_SCANCODE_OUT),
    WB_KEY_OPER = WB_SCANCODE_TO_KEY(WB_SCANCODE_OPER),
    WB_KEY_CLEARAGAIN = WB_SCANCODE_TO_KEY(WB_SCANCODE_CLEARAGAIN),
    WB_KEY_CRSEL = WB_SCANCODE_TO_KEY(WB_SCANCODE_CRSEL),
    WB_KEY_EXSEL = WB_SCANCODE_TO_KEY(WB_SCANCODE_EXSEL),

    WB_KEY_KP_00 = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_00),
    WB_KEY_KP_000 = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_000),
    WB_KEY_THOUSANDSSEPARATOR = WB_SCANCODE_TO_KEY(WB_SCANCODE_THOUSANDSSEPARATOR),
    WB_KEY_DECIMALSEPARATOR = WB_SCANCODE_TO_KEY(WB_SCANCODE_DECIMALSEPARATOR),
    WB_KEY_CURRENCYUNIT = WB_SCANCODE_TO_KEY(WB_SCANCODE_CURRENCYUNIT),
    WB_KEY_CURRENCYSUBUNIT = WB_SCANCODE_TO_KEY(WB_SCANCODE_CURRENCYSUBUNIT),
    WB_KEY_KP_LEFTPAREN = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_LEFTPAREN),
    WB_KEY_KP_RIGHTPAREN = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_RIGHTPAREN),
    WB_KEY_KP_LEFTBRACE = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_LEFTBRACE),
    WB_KEY_KP_RIGHTBRACE = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_RIGHTBRACE),
    WB_KEY_KP_TAB = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_TAB),
    WB_KEY_KP_BACKSPACE = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_BACKSPACE),
    WB_KEY_KP_A = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_A),
    WB_KEY_KP_B = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_B),
    WB_KEY_KP_C = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_C),
    WB_KEY_KP_D = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_D),
    WB_KEY_KP_E = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_E),
    WB_KEY_KP_F = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_F),
    WB_KEY_KP_XOR = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_XOR),
    WB_KEY_KP_POWER = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_POWER),
    WB_KEY_KP_PERCENT = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_PERCENT),
    WB_KEY_KP_LESS = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_LESS),
    WB_KEY_KP_GREATER = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_GREATER),
    WB_KEY_KP_AMPERSAND = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_AMPERSAND),
    WB_KEY_KP_DBLAMPERSAND = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_DBLAMPERSAND),
    WB_KEY_KP_VERTICALBAR = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_VERTICALBAR),
    WB_KEY_KP_DBLVERTICALBAR = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_DBLVERTICALBAR),
    WB_KEY_KP_COLON = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_COLON),
    WB_KEY_KP_HASH = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_HASH),
    WB_KEY_KP_SPACE = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_SPACE),
    WB_KEY_KP_AT = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_AT),
    WB_KEY_KP_EXCLAM = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_EXCLAM),
    WB_KEY_KP_MEMSTORE = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_MEMSTORE),
    WB_KEY_KP_MEMRECALL = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_MEMRECALL),
    WB_KEY_KP_MEMCLEAR = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_MEMCLEAR),
    WB_KEY_KP_MEMADD = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_MEMADD),
    WB_KEY_KP_MEMSUBTRACT = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_MEMSUBTRACT),
    WB_KEY_KP_MEMMULTIPLY = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_MEMMULTIPLY),
    WB_KEY_KP_MEMDIVIDE = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_MEMDIVIDE),
    WB_KEY_KP_PLUSMINUS = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_PLUSMINUS),
    WB_KEY_KP_CLEAR = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_CLEAR),
    WB_KEY_KP_CLEARENTRY = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_CLEARENTRY),
    WB_KEY_KP_BINARY = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_BINARY),
    WB_KEY_KP_OCTAL = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_OCTAL),
    WB_KEY_KP_DECIMAL = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_DECIMAL),
    WB_KEY_KP_HEXADECIMAL = WB_SCANCODE_TO_KEY(WB_SCANCODE_KP_HEXADECIMAL),

    WB_KEY_LCTRL = WB_SCANCODE_TO_KEY(WB_SCANCODE_LCTRL),
    WB_KEY_LSHIFT = WB_SCANCODE_TO_KEY(WB_SCANCODE_LSHIFT),
    WB_KEY_LALT = WB_SCANCODE_TO_KEY(WB_SCANCODE_LALT),
    WB_KEY_LGUI = WB_SCANCODE_TO_KEY(WB_SCANCODE_LGUI),
    WB_KEY_RCTRL = WB_SCANCODE_TO_KEY(WB_SCANCODE_RCTRL),
    WB_KEY_RSHIFT = WB_SCANCODE_TO_KEY(WB_SCANCODE_RSHIFT),
    WB_KEY_RALT = WB_SCANCODE_TO_KEY(WB_SCANCODE_RALT),
    WB_KEY_RGUI = WB_SCANCODE_TO_KEY(WB_SCANCODE_RGUI),
    WB_KEY_COUNT = 256
} WbKey;

typedef enum WbKeyMod
{
    WB_KEY_MOD_NONE = 0x0000,
    WB_KEY_MOD_LSHIFT = 0x0001,
    WB_KEY_MOD_RSHIFT = 0x0002,
    WB_KEY_MOD_LCTRL = 0x0040,
    WB_KEY_MOD_RCTRL = 0x0080,
    WB_KEY_MOD_LALT = 0x0100,
    WB_KEY_MOD_RALT = 0x0200,
    WB_KEY_MOD_LGUI = 0x0400,
    WB_KEY_MOD_RGUI = 0x0800,
    WB_KEY_MOD_NUM = 0x1000,
    WB_KEY_MOD_CAPS = 0x2000,
    WB_KEY_MOD_MODE = 0x4000,
    WB_KEY_MOD_RESERVED = 0x8000,

    WB_KEY_MOD_CTRL = WB_KEY_MOD_LCTRL | WB_KEY_MOD_RCTRL,
    WB_KEY_MOD_SHIFT = WB_KEY_MOD_LSHIFT | WB_KEY_MOD_RSHIFT,
    WB_KEY_MOD_ALT = WB_KEY_MOD_LALT | WB_KEY_MOD_RALT,
    WB_KEY_MOD_GUI = WB_KEY_MOD_LGUI | WB_KEY_MOD_RGUI
} WbKeyMod;

typedef struct WbInputState
{
    int32_t mouse_x;
    int32_t mouse_y;
    int32_t mouse_delta_x;
    int32_t mouse_delta_y;
    int32_t mouse_wheel;
    WbKeyMod key_mods;

    bool mouse_double_click;
    uint32_t last_click_tick;

    bool mouse_button_down[WB_MOUSE_BUTTON_COUNT];
    bool mouse_button_up[WB_MOUSE_BUTTON_COUNT];
    bool key_down[WB_KEY_COUNT];
    bool key_up[WB_KEY_COUNT];
    char unicode_chars[WB_KEY_COUNT];
} WbInputState;

